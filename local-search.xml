<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/04/20/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E4%B8%8E%E9%A2%84%E5%A4%84%E7%90%86%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%BD%9C%E4%B8%9A/"/>
    <url>/2023/04/20/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E4%B8%8E%E9%A2%84%E5%A4%84%E7%90%86%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="数据采集与预处理第二次作业"><a href="#数据采集与预处理第二次作业" class="headerlink" title="数据采集与预处理第二次作业"></a>数据采集与预处理第二次作业</h1><h2 id="什么是反爬机制"><a href="#什么是反爬机制" class="headerlink" title="什么是反爬机制"></a>什么是反爬机制</h2><p>由于数据的价值和爬虫请求的频繁导致网站服务器不能正常工作，由此妨碍了企业的业务的发展，企业运用反扒机制去阻止网页上的数据被爬走和阻止过频繁的爬虫请求。</p><h2 id="请阐述用python实现HTTP请求的三种常见格式"><a href="#请阐述用python实现HTTP请求的三种常见格式" class="headerlink" title="请阐述用python实现HTTP请求的三种常见格式"></a>请阐述用python实现HTTP请求的三种常见格式</h2><p>以对百度的请求为例</p><h3 id="urllib模块"><a href="#urllib模块" class="headerlink" title="urllib模块"></a>urllib模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.request<br>url=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span><br>response = urllib.request.urlopen(url)<br>html=response.read()<br><span class="hljs-built_in">print</span>(html)<br></code></pre></td></tr></table></figure><h3 id="urlib3模块"><a href="#urlib3模块" class="headerlink" title="urlib3模块"></a>urlib3模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib3<br><br>http = urllib3.PoolManager()<br>url = <span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span><br>response = http.request(<span class="hljs-string">&#x27;GET&#x27;</span>,url)<br><span class="hljs-built_in">print</span>(response.data)<br></code></pre></td></tr></table></figure><h3 id="requests模块"><a href="#requests模块" class="headerlink" title="requests模块"></a>requests模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span><br>response = requests.get(url)<br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><h2 id="如何定制requests"><a href="#如何定制requests" class="headerlink" title="如何定制requests"></a>如何定制requests</h2><h3 id="定制get请求的参数"><a href="#定制get请求的参数" class="headerlink" title="定制get请求的参数"></a>定制get请求的参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment"># https://movie.douban.com/top250?start=25&amp;filter=unwatched</span><br>param_data = &#123;<span class="hljs-string">&#x27;start&#x27;</span>:<span class="hljs-string">&#x27;25&#x27;</span>,<span class="hljs-string">&#x27;filter&#x27;</span>:<span class="hljs-string">&#x27;unwatched&#x27;</span>&#125;<br>url = <span class="hljs-string">&#x27;https://movie.douban.com/top250&#x27;</span><br>response = requests.get(url,params=param_data)<br><span class="hljs-built_in">print</span>(response.url)<br><span class="hljs-comment">#此时输出text为空 需要加请求头</span><br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><p><img src="C:\Users\wzzz\AppData\Roaming\Typora\typora-user-images\image-20230315204330016.png" alt="image-20230315204330016"></p><h3 id="定制请求头"><a href="#定制请求头" class="headerlink" title="定制请求头"></a>定制请求头</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment"># https://movie.douban.com/top250?start=25&amp;filter=unwatched</span><br>param_data = &#123;<span class="hljs-string">&#x27;start&#x27;</span>:<span class="hljs-string">&#x27;25&#x27;</span>,<span class="hljs-string">&#x27;filter&#x27;</span>:<span class="hljs-string">&#x27;unwatched&#x27;</span>&#125;<br>headers=&#123;<br>    <span class="hljs-string">&#x27;user-agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.69&#x27;</span><br>&#125;<br>url = <span class="hljs-string">&#x27;https://movie.douban.com/top250&#x27;</span><br>response = requests.get(url,params=param_data,headers=headers)<br><span class="hljs-built_in">print</span>(response.url)<br><span class="hljs-comment">#此时可以输出网页的html源代码</span><br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><h2 id="如何使用BeautifulSoup解析HTML文档可以用哪些解析器？各有什么优缺点"><a href="#如何使用BeautifulSoup解析HTML文档可以用哪些解析器？各有什么优缺点" class="headerlink" title="如何使用BeautifulSoup解析HTML文档可以用哪些解析器？各有什么优缺点"></a>如何使用BeautifulSoup解析HTML文档可以用哪些解析器？各有什么优缺点</h2><table><thead><tr><th>解析器</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>Python标准库</td><td>Python标准库执行速度适中</td><td>文档容错能力差</td></tr><tr><td>lxml的HTML解析器</td><td>速度快，文件容错能力强</td><td>需要安装c语言库</td></tr><tr><td>lxml的XML解析器</td><td>速度快且唯一支持XML的解析器</td><td>需要安装c语言库</td></tr><tr><td>html5lib</td><td>兼容性好，以浏览器方式解析生成的HTML文档</td><td>速度慢，不依赖外部扩展</td></tr></tbody></table><h2 id="Scrapy体系架构包括哪几个组成部分？每个组成部分的功能是什么？"><a href="#Scrapy体系架构包括哪几个组成部分？每个组成部分的功能是什么？" class="headerlink" title="Scrapy体系架构包括哪几个组成部分？每个组成部分的功能是什么？"></a>Scrapy体系架构包括哪几个组成部分？每个组成部分的功能是什么？</h2><p>Scapy体系架构包括</p><ol><li>Item Pipeline 数据队列 持久化实体，验证实体的有效性、清除不需要的信息</li><li>Scheduler 存放url ，决定下一个要抓取的网站是什么，同时去除重复的网址</li><li>Downloader 发送请求，高速的下载网络上的资源</li><li>Spiders 提取数据，提取url，从特定的网页中提取自己想要的信息</li><li>Scrapy引擎 用来控制调度器、下载器、爬虫，控制整个流程</li></ol><h2 id="在XPATH中，节点之间存在哪几种关系"><a href="#在XPATH中，节点之间存在哪几种关系" class="headerlink" title="在XPATH中，节点之间存在哪几种关系"></a>在XPATH中，节点之间存在哪几种关系</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>            test1<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br>            test2<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>父节点：每个元素和属性都有一个父节点。例如html是head的父节点，head是p的父节点</li><li>子节点：每一个元素节点的下一个直接节点是该元素节点的子节点。每个元素节点可以有零个、一个或多个子节点。例如head是html的子节点，p是head的子节点。</li><li>兄弟节点：拥有相同父节点的节点，就是兄弟节点。class为1的p和class为2的p互为兄弟节点，父亲都是head</li><li>祖先节点：节点的父节点以及父节点的父节点等，称作“祖先节点”。html和head是p的祖先节点</li><li>后代节点：节点的子节点以及子节点的子节点等，称作“后代节点”。head、p均为html的后代节点</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第一篇文章</title>
    <link href="/2023/04/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <url>/2023/04/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>hh</p><p>哈哈哈哈哈哈哈行号</p>]]></content>
    
    
    
    <tags>
      
      <tag>1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/18/hello-world/"/>
    <url>/2023/04/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
